# render.yaml (coloca na root do repositório)
previewsEnabled: false
databases:
  - name: energy4all-db
    plan: starter   # podes subir depois
services:
  # Redis gerido pela Render
  - type: redis
    name: energy4all-redis
    plan: starter   # podes começar em free se disponível na tua conta
    ipAllowList: [] # privado

  # Meilisearch como Private Service (com disco persistente)
  - type: pserv
    name: meili
    env: docker
    plan: starter
    dockerCommand: ./meili-start.sh
    repo: https://github.com/meilisearch/meilisearch
    branch: v1.10
    dockerContext: .
    dockerfilePath: Dockerfile
    healthCheckPath: /health
    disk:
      name: meili-data
      mountPath: /meili_data
      sizeGB: 5
    envVars:
      - key: MEILI_ENV
        value: production
      - key: MEILI_MASTER_KEY
        generateValue: true
      - key: MEILI_NO_ANALYTICS
        value: "true"

  # API FastAPI (Docker)
  - type: web
    name: energy4all-api
    env: docker
    plan: starter
    region: frankfurt
    dockerfilePath: apps/api/Dockerfile
    dockerContext: apps/api
    dockerCommand: bash -lc 'export MEILI_URL=http://$MEILI_HOST:$MEILI_PORT; uvicorn main:app --host 0.0.0.0 --port $PORT'
    healthCheckPath: /health
    autoDeploy: true
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: energy4all-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: energy4all-redis
          property: connectionString
      # apanhar host e port do pserv meili e montar MEILI_URL via dockerCommand
      - key: MEILI_HOST
        fromService:
          type: pserv
          name: meili
          property: host
      - key: MEILI_PORT
        fromService:
          type: pserv
          name: meili
          property: port
      - key: MEILI_MASTER_KEY
        fromService:
          type: pserv
          name: meili
          envVarKey: MEILI_MASTER_KEY
      - key: OPENAI_API_KEY
        sync: false
      - key: OPENAI_MODEL
        value: gpt-4.1-mini
      - key: OPENAI_BASE_URL
        value: https://api.openai.com/v1

  # Worker Celery (Docker) com Beat (agenda) embutido
  - type: worker
    name: energy4all-worker
    env: docker
    plan: starter
    region: frankfurt
    dockerfilePath: apps/worker/Dockerfile
    dockerContext: apps/worker
    dockerCommand: bash -lc 'export MEILI_URL=http://$MEILI_HOST:$MEILI_PORT; celery -A app.celery worker -B -Q default -c 2 --loglevel=INFO'
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: energy4all-db
          property: connectionString
      - key: REDIS_URL
        fromService:
          type: redis
          name: energy4all-redis
          property: connectionString
      - key: MEILI_HOST
        fromService:
          type: pserv
          name: meili
          property: host
      - key: MEILI_PORT
        fromService:
          type: pserv
          name: meili
          property: port
      - key: MEILI_MASTER_KEY
        fromService:
          type: pserv
          name: meili
          envVarKey: MEILI_MASTER_KEY
      - key: OPENAI_API_KEY
        sync: false
      - key: OPENAI_MODEL
        value: gpt-4.1-mini
      - key: OPENAI_BASE_URL
        value: https://api.openai.com/v1

  # Frontend Next.js (Docker)
  - type: web
    name: energy4all-web
    env: docker
    plan: starter
    region: frankfurt
    dockerfilePath: apps/web/Dockerfile
    dockerContext: apps/web
    healthCheckPath: /
    autoDeploy: true
    envVars:
      # Aponta o frontend para a API (Render dá-nos a URL externa do serviço API)
      - key: NEXT_PUBLIC_API_BASE
        fromService:
          type: web
          name: energy4all-api
          envVarKey: RENDER_EXTERNAL_URL

  # Cron: ingestão RSS a cada 15 min (bate no endpoint da API)
  - type: cron
    name: cron-ingest
    schedule: "*/15 * * * *"
    env: docker
    plan: starter
    dockerCommand: bash -lc 'curl -fsS -X POST "$ENERGY4ALL_API/ingest/rss" || true'
    envVars:
      - key: ENERGY4ALL_API
        fromService:
          type: web
          name: energy4all-api
          envVarKey: RENDER_EXTERNAL_URL

  # Cron: geração de artigos de hora a hora (usa tópico genérico se não houver raw)
  - type: cron
    name: cron-generate
    schedule: "7 * * * *"
    env: docker
    plan: starter
    dockerCommand: bash -lc 'curl -fsS -X POST -H "content-type: application/json" -d "{\"topic\":\"tarifas de eletricidade 2025\"}" "$ENERGY4ALL_API/generate/article" || true'
    envVars:
      - key: ENERGY4ALL_API
        fromService:
          type: web
          name: energy4all-api
          envVarKey: RENDER_EXTERNAL_URL
